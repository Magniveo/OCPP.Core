@page "/transactions"
@page "/transactions/{id}"
@page "/transactions/{id}/{ts}"

<h3>Transactions</h3>
<div class="row">

    <select class="form-control" @bind="selectID" @bind:event="oninput" @onchange="SetOnChangeSelect">
        @foreach (var cp in listCP)
        {
            <option value=@cp.ChargePointId>@cp.Name</option>
        }
    </select>
    <select class="form-control">
        <option value="30">30</option>
        <option value="90">90</option>
        <option value="360">360</option>
    </select>
</div>
<div class="row">
@if (transactionListViewModels != null)
{
    <table id="dtTransactions" class="table table-striped table-bordered table-sm" cellspacing="0" width="100%">
        <thead>
            <tr>
                <th class="th-sm">@Localizer["Connector"]</th>
                <th class="th-sm">@Localizer["StartTime"]</th>
                <th class="th-sm">@Localizer["StartTag"]</th>
                <th class="th-sm">@Localizer["StartMeter"]</th>
                <th class="th-sm">@Localizer["StopTime"]</th>
                <th class="th-sm">@Localizer["StopTag"]</th>
                <th class="th-sm">@Localizer["StopMeter"]</th>
                <th class="th-sm">@Localizer["ChargeSum"]</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var t in transactionListViewModels.Transactions)
            {
            string startTag = t.StartTagId;
            string stopTag = t.StopTagId;
            if (!string.IsNullOrEmpty(t.StartTagId) && transactionListViewModels.ChargeTags != null && transactionListViewModels.ChargeTags.ContainsKey(t.StartTagId))
            {
            startTag = transactionListViewModels.ChargeTags[t.StartTagId]?.TagName;
            }
            if (!string.IsNullOrEmpty(t.StopTagId) && transactionListViewModels.ChargeTags != null && transactionListViewModels.ChargeTags.ContainsKey(t.StopTagId))
            {
            stopTag = transactionListViewModels.ChargeTags[t.StopTagId]?.TagName;
            }
            <tr>
                <td>@currentConnectorName</td>
                <td>@string.Format("{0} {1}", t.StartTime.ToLocalTime().ToShortDateString(), t.StartTime.ToLocalTime().ToShortTimeString())</td>
                <td>@startTag</td>
                <td>@string.Format("{0:0.0##}", t.MeterStart)</td>
                <td>@((t.StopTime != null) ? string.Format("{0} {1}", t.StopTime.Value.ToLocalTime().ToShortDateString(), t.StopTime.Value.ToLocalTime().ToShortTimeString()) : string.Empty)</td>
                <td>@stopTag</td>
                <td>@((t.MeterStop != null) ? string.Format("{0:0.0##}", t.MeterStop) : string.Empty)</td>
                <td>@((t.MeterStop != null) ? string.Format("{0:0.0##}", (t.MeterStop - t.MeterStart)) : string.Empty)</td>
            </tr>
            }
        </tbody>
    </table>
}
</div>
@inject OCPP.Core.ManagementBlazor.Data.Services.ChargePointContextServices ChargePointContextServices;
@using OCPP.Core.ManagementBlazor.Models;
@using OCPP.Core.Database;
@using Microsoft.AspNetCore.WebUtilities;
@code {
    string timespan = "";// = (Model.Timespan == 2) ? "?t=2" : ((Model.Timespan == 3) ? "?t=3" : string.Empty);
    string currentConnectorName = string.Empty;
    string selectID;
    [Inject] public Microsoft.Extensions.Localization.IStringLocalizer<Index> Localizer { get; set; }
    private List<ConnectorStatusViewModel> connectorStatusViewModels = new List<ConnectorStatusViewModel>();
    private TransactionListViewModel transactionListViewModels;
    [Parameter]
    public string id { get; set; }
    [Parameter]
    public string ts { get; set; }
    private List<ChargePoint> listCP = new List<ChargePoint>();
    protected override async Task OnInitializedAsync()
    {
        listCP = await ChargePointContextServices.GetChargePoints();
        //Console.WriteLine(String.Format("{0} -- {1}", id, ts));
        //var uri = Nav
        if(listCP.Count>0)
            transactionListViewModels = await ChargePointContextServices.GetTransactionListViewModel(listCP[0].ChargePointId,
                "1", "1");
    }
    private void SetOnChangeSelect(ChangeEventArgs __e)
    {

    }
}

